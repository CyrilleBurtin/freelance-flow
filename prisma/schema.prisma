generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @unique
  email         String    @unique
  name          String?
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  tasks         Task[]
  clients       Client[]
  role          String

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Client {
  id        String   @id @default(uuid()) // Identifiant unique pour le client
  name      String // Nom du client (ex. : "Agence XYZ")
  email     String? // Email du client (optionnel, pour la facturation par exemple)
  userId    String // Lier le client à un utilisateur
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks     Task[] // Relation : un client peut être associé à plusieurs tâches
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("client")
}

model Task {
  id        String   @id @default(uuid()) // Identifiant unique pour la tâche
  title     String // Nom de la tâche (ex. : "Rédaction article blog")
  deadline  DateTime // Date limite de la tâche
  clientId  String? // Lier la tâche à un client (optionnel)
  client    Client?  @relation(fields: [clientId], references: [id], onDelete: SetNull) // Relation avec Client
  userId    String // Lier la tâche à un utilisateur
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade) // Relation avec User
  status    String   @default("pending") // Statut de la tâche (ex. : "pending", "in_progress", "completed")
  order     Int      @default(0) // Champ pour gérer la priorité (drag-and-drop)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("task")
}
